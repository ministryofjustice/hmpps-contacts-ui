/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sync/prisoner-contact/{prisonerContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a prisoner contact by prisonerContactId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one prisoner contact.
     *
     */
    get: operations['getPrisonerContactById']
    /**
     * Updates a prisoner contact with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a prisoner contact.
     *
     */
    put: operations['updatePrisonerContact']
    post?: never
    /**
     * Deletes one prisoner contact by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a prisoner contact.
     *
     */
    delete: operations['deletePrisonerContactById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact by contactId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact.
     *
     */
    get: operations['getContactById']
    /**
     * Updates a contact with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact.
     *
     */
    put: operations['updateContact']
    post?: never
    /**
     * Deletes one contact by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact.
     *
     */
    delete: operations['deleteContactById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new contact restriction
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact restriction and associate it with a contact.
     *
     */
    put: operations['createContactRestriction']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new contact phone
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact phone and associate it with a contact.
     *
     */
    put: operations['createContactPhone']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-identity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new contact identity
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact identity and associate it with a contact.
     *
     */
    put: operations['createContactIdentity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new contact email
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact email and associate it with a contact.
     *
     */
    put: operations['createContactEmail']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new contact address
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact address and associate it with a contact.
     *
     */
    put: operations['createContactAddress']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new prisoner contact
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a prisoner contact.
     *
     */
    post: operations['createPrisonerContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to create a contact and associate it with a contact.
     *
     */
    post: operations['createContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-restriction/{contactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact restriction by contactRestrictionId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact restriction.
     *
     */
    get: operations['getContactRestrictionById']
    put?: never
    /**
     * Updates a contact restriction with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact restriction.
     *
     */
    post: operations['updateContactRestriction']
    /**
     * Deletes one contact restriction by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact restriction.
     *
     */
    delete: operations['deleteContactRestrictionById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-phone/{contactPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact phone by contactPhoneId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact phone.
     *
     */
    get: operations['getContactPhoneById']
    put?: never
    /**
     * Updates a contact phone with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact phone.
     *
     */
    post: operations['updateContactPhone']
    /**
     * Deletes one contact phone by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact phone.
     *
     */
    delete: operations['deleteContactPhoneById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-identity/{contactIdentityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact identity by contactIdentityId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact identity.
     *
     */
    get: operations['getContactIdentityById']
    put?: never
    /**
     * Updates a contact identity with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact identity.
     *
     */
    post: operations['updateContactIdentity']
    /**
     * Deletes one contact identity by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact identity.
     *
     */
    delete: operations['deleteContactIdentityById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-email/{contactEmailId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact email by contactEmailId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact email.
     *
     */
    get: operations['getContactEmailById']
    put?: never
    /**
     * Updates a contact email with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact email.
     *
     */
    post: operations['updateContactEmail']
    /**
     * Deletes one contact email by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact email.
     *
     */
    delete: operations['deleteContactEmailById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address/{contactAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact address by contactAddressId
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to get the details for one contact address.
     *
     */
    get: operations['getContactAddressById']
    put?: never
    /**
     * Updates a contact address with new or extra detail
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to update a contact address.
     *
     */
    post: operations['updateContactAddress']
    /**
     * Deletes one contact address by internal ID
     * @description
     *           Requires role: ROLE_CONTACTS_MIGRATION.
     *           Used to delete a contact address.
     *
     */
    delete: operations['deleteContactAddressById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a new contact
     * @description Creates a new contact that is not yet associated with any prisoner.
     */
    post: operations['createContact_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/relationship': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a new contact relationship
     * @description Creates a new relationship between the contact and a prisoner.
     */
    post: operations['addContactRelationship']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-codes/group/{groupCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to return reference data for a provided group key */
    get: operations['getReferenceDataByGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to get a specific prisoner by prison number */
    get: operations['getPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to fetch all contacts for a specific prisoner by prisoner number and active status */
    get: operations['getAllContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets all language references
     */
    get: operations['getAllCountries']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their id
     */
    get: operations['getLanguageById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their nomis code
     */
    get: operations['getLanguageByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/iso-alpha3/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their by ISO Alpha 3 code
     */
    get: operations['getLanguageByIsoAlpha3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/iso-alpha2/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their ISO Alpha 2 code
     */
    get: operations['getLanguageByIsoAlpha2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets all county references
     */
    get: operations['getAllCountries_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets a county reference by their id
     */
    get: operations['getCountyById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets a county reference by their nomis code
     */
    get: operations['getCountyByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets all country references
     */
    get: operations['getAllCountries_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their id
     */
    get: operations['getCountryById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their nomis code
     */
    get: operations['getCountryByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/iso-alpha3/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their by ISO Alpha 3 code
     */
    get: operations['getCountryByIsoAlpha3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/iso-alpha2/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their ISO Alpha 2 code
     */
    get: operations['getCountryByIsoAlpha2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact
     * @description Gets a contact by their id
     */
    get: operations['getContact']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search contacts
     * @description Search all contacts by their last name or first name or middle name or date of birth
     */
    get: operations['searchContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets all city references
     */
    get: operations['getAllCountries_3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets a city reference by their id
     */
    get: operations['getCityById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets a city reference by their nomis code
     */
    get: operations['getCityByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Request object to update prisoner contact details */
    UpdatePrisonerContactRequest: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The type of relationship
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string | null
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor?: boolean | null
      /**
       * @description Indicates if the prisoner contact is aware of charges
       * @example true
       */
      awareOfCharges?: boolean | null
      /**
       * @description Indicates if the prisoner contact can be contacted
       * @example true
       */
      canBeContacted?: boolean | null
      /**
       * @description The user who approved the prisoner contact
       * @example officer123
       */
      approvedBy?: string | null
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was approved
       * @example 2024-01-01T14:00:00Z
       */
      approvedTime?: string | null
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string | null
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string | null
      /**
       * @description The user who last amended the prisoner contact
       * @example adminUser
       */
      amendedBy?: string | null
      /**
       * Format: date-time
       * @description The timestamp of when the prisoner contact was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Response object with prisoner contact details */
    PrisonerContact: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The type of relationship
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string | null
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor?: boolean | null
      /**
       * @description Indicates if the prisoner contact is aware of charges
       * @example true
       */
      awareOfCharges?: boolean | null
      /**
       * @description Indicates if the prisoner contact can be contacted
       * @example true
       */
      canBeContacted?: boolean | null
      /**
       * @description The user who approved the prisoner contact
       * @example officer123
       */
      approvedBy?: string | null
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was approved
       * @example 2024-01-01T14:00:00Z
       */
      approvedTime?: string | null
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string | null
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string | null
      /**
       * @description The user who created the prisoner contact
       * @example system
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was created
       */
      createdTime: string
      /**
       * @description The user who last amended the prisoner contact
       * @example adminUser
       */
      amendedBy?: string | null
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was last amended
       * @example 2024-02-01T16:00:00Z
       */
      amendedTime?: string | null
    }
    /** @description Request to update a new contact  */
    UpdateContactRequest: {
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description Whether the contact is over 18, based on their date of birth if it is known
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The type code of the contact
       * @example PERSON
       */
      contactTypeCode?: string | null
      /**
       * @description The place of birth of the contact
       * @example London
       */
      placeOfBirth?: string | null
      /**
       * @description Whether the contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Whether the contact is suspended
       * @example false
       */
      suspended?: boolean | null
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      staffFlag?: boolean | null
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean | null
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string | null
      /**
       * @description The coroner's number, if applicable
       * @example CRN12345
       */
      coronerNumber?: string | null
      /**
       * @description The gender of the contact
       * @example Male
       */
      gender?: string | null
      /**
       * @description The marital status of the contact
       * @example Single
       */
      maritalStatus?: string | null
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string | null
      /**
       * @description The nationality code of the contact
       * @example GB
       */
      nationalityCode?: string | null
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean | null
      /**
       * @description Additional comments about the contact
       * @example This contact has special dietary requirements.
       */
      comments?: string | null
      /**
       * @description The id of the user who updated the contact
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description The details of a contact as an individual */
    Contact: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description Whether the contact is over 18, based on their date of birth if it is known
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The type code of the contact
       * @example PERSON
       */
      contactTypeCode?: string | null
      /**
       * @description The place of birth of the contact
       * @example London
       */
      placeOfBirth?: string | null
      /**
       * @description Whether the contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Whether the contact is suspended
       * @example false
       */
      suspended?: boolean | null
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      staffFlag?: boolean | null
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean | null
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string | null
      /**
       * @description The coroner's number, if applicable
       * @example CRN12345
       */
      coronerNumber?: string | null
      /**
       * @description The gender of the contact
       * @example Male
       */
      gender?: string | null
      /**
       * @description The marital status of the contact
       * @example Single
       */
      maritalStatus?: string | null
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string | null
      /**
       * @description The nationality code of the contact
       * @example GB
       */
      nationalityCode?: string | null
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean | null
      /**
       * @description Additional comments about the contact
       * @example This contact has special dietary requirements.
       */
      comments?: string | null
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       */
      createdTime: string
      /**
       * @description User who amended the entry
       * @example admin2
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was amended
       */
      amendedTime?: string
    }
    /** @description Request to create a new contact restriction  */
    CreateContactRestrictionRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the restriction was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Restriction related to a contact */
    ContactRestriction: {
      /**
       * Format: int64
       * @description Unique identifier for the contact restriction
       * @example 1
       */
      contactRestrictionId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       */
      createdTime: string
      /**
       * @description User who amended the entry
       * @example admin2
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was amended
       */
      amendedTime?: string
    }
    /** @description Request to create a new contact phone number */
    CreateContactPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOBILE
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description Indicates if this is the primary phone number
       * @example true
       */
      primaryPhone: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the phone was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Phone related to a contact */
    ContactPhone: {
      /**
       * Format: int64
       * @description Unique identifier for the contact phone
       * @example 1
       */
      contactPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOBILE
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description Indicates if this is the primary phone number
       * @example true
       */
      primaryPhone: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       */
      createdTime: string
      /**
       * @description User who amended the entry
       * @example admin2
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was amended
       */
      amendedTime?: string
    }
    /** @description Request to create a new contact identity  */
    CreateContactIdentityRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example MOBILE
       */
      identityType: string
      /**
       * @description Identity
       * @example +1234567890
       */
      identityValue: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the identity was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Identity related to a contact */
    ContactIdentity: {
      /**
       * Format: int64
       * @description Unique identifier for the contact identity
       * @example 1
       */
      contactIdentityId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example MOBILE
       */
      identityType: string
      /**
       * @description Identity
       * @example +1234567890
       */
      identityValue: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       */
      createdTime: string
      /**
       * @description User who amended the entry
       * @example admin2
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was amended
       */
      amendedTime?: string
    }
    /** @description Request to create a new contact email address */
    CreateContactEmailRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of email
       * @example MOBILE
       */
      emailType: string
      /**
       * @description Email address
       * @example +1234567890
       */
      emailAddress: string
      /**
       * @description Indicates if this is the primary email address
       * @example true
       */
      primaryEmail: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the email was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Email related to a contact */
    ContactEmail: {
      /**
       * Format: int64
       * @description Unique identifier for the contact email
       * @example 1
       */
      contactEmailId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of email
       * @example MOBILE
       */
      emailType: string
      /**
       * @description Email address
       * @example +1234567890
       */
      emailAddress: string
      /**
       * @description Indicates if this is the primary Email address
       * @example true
       */
      primaryEmail: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       */
      createdTime: string
      /**
       * @description User who amended the entry
       * @example admin2
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was amended
       */
      amendedTime?: string
    }
    /** @description Request to create a new contact address */
    CreateContactAddressRequest: {
      /**
       * Format: int64
       * @description The id of the contact this address is linked with
       * @example 123456
       */
      contactId: number
      /**
       * @description The type of address
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string | null
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string | null
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string | null
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string | null
      /**
       * @description City code - from NOMIS
       * @example BIRM
       */
      cityCode?: string | null
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string | null
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string | null
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode?: string | null
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified?: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description An address related to a contact */
    ContactAddress: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      contactId: number
      /**
       * @description The type of address
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string | null
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string | null
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string | null
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string | null
      /**
       * @description City code - from NOMIS
       * @example BIRM
       */
      cityCode?: string | null
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string | null
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string | null
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode?: string | null
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Which username ran the postcode lookup check
       * @example NJKG44D
       */
      verifiedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the postcode lookup was done
       * @example 2024-01-01T00:00:00Z
       */
      verifiedTime?: string
      /**
       * @description Flag to indicate whether mail is allowed to be sent to this address
       * @example false
       */
      mailFlag: boolean
      /**
       * Format: date
       * @description The start date when this address is to be considered active from
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address is to be considered no longer active
       * @example 2024-01-01
       */
      endDate?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      /**
       * @description The id of the user who last amended the contact address
       * @example JD000001
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact address was last amended
       * @example 2024-01-01T00:00:00Z
       */
      amendedTime?: string
    }
    /** @description Request object to create a prisoner contact details */
    CreatePrisonerContactRequest: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The type of relationship
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string | null
      /**
       * @description The user who created the prisoner contact
       * @example system
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was created
       */
      createdTime: string
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor?: boolean | null
      /**
       * @description Indicates if the prisoner contact is aware of charges
       * @example true
       */
      awareOfCharges?: boolean | null
      /**
       * @description Indicates if the prisoner contact can be contacted
       * @example true
       */
      canBeContacted?: boolean | null
      /**
       * @description The user who approved the prisoner contact
       * @example officer123
       */
      approvedBy?: string | null
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was approved
       * @example 2024-01-01T14:00:00Z
       */
      approvedTime?: string | null
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string | null
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string | null
    }
    /** @description A description of the relationship if the contact should be linked to a prisoner */
    ContactRelationship: {
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The relationship code between the prisoner and the contact
       * @example FRI
       */
      relationshipCode: string
      /**
       * @description Whether they are the next of kin for the prisoner
       * @example true
       */
      isNextOfKin: boolean
      /**
       * @description Whether they are the emergency contact for the prisoner
       * @example true
       */
      isEmergencyContact: boolean
      /**
       * @description Comments about the contacts relationship with the prisoner
       * @example Some additional information
       */
      comments?: string | null
    } | null
    /** @description Request to create a new contact */
    CreateContactRequest: {
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description If the date of birth is not known, this indicates whether they are believed to be over 18 or not
       * @example YES
       * @enum {string|null}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW' | null
      relationship?: components['schemas']['ContactRelationship']
      /**
       * @description The type code of the contact
       * @example PERSON
       */
      contactTypeCode?: string | null
      /**
       * @description The place of birth of the contact
       * @example London
       */
      placeOfBirth?: string | null
      /**
       * @description Whether the contact is active
       * @example true
       */
      active?: boolean | null
      /**
       * @description Whether the contact is suspended
       * @example false
       */
      suspended?: boolean | null
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      staffFlag?: boolean | null
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean | null
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string | null
      /**
       * @description The coroner's number, if applicable
       * @example CRN12345
       */
      coronerNumber?: string | null
      /**
       * @description The gender of the contact
       * @example Male
       */
      gender?: string | null
      /**
       * @description The marital status of the contact
       * @example Single
       */
      maritalStatus?: string | null
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string | null
      /**
       * @description The nationality code of the contact
       * @example GB
       */
      nationalityCode?: string | null
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean | null
      /**
       * @description Additional comments about the contact
       * @example This contact has special dietary requirements.
       */
      comments?: string | null
      /**
       * @description The id of the user creating the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to update a contact restriction  */
    UpdateContactRestrictionRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Any comments about the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description The id of the user who updated the contact restriction
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact restriction was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Request to update a new contact phone number */
    UpdateContactPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOBILE
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description Indicates if this is the primary phone number
       * @example true
       */
      primaryPhone: boolean
      /**
       * @description The id of the user who updated the contact phone
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact phone was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Request to update a new contact identity  */
    UpdateContactIdentityRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example MOBILE
       */
      identityType: string
      /**
       * @description Identity
       * @example +1234567890
       */
      identityValue: string
      /**
       * @description The id of the user who updated the contact identity
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact identity was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Request to update a new contact email address */
    UpdateContactEmailRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of email
       * @example MOBILE
       */
      emailType: string
      /**
       * @description Email address
       * @example +1234567890
       */
      emailAddress: string
      /**
       * @description Indicates if this is the primary email address
       * @example true
       */
      primaryEmail: boolean
      /**
       * @description The id of the user who updated the contact email
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact email was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Request to update a contact address */
    UpdateContactAddressRequest: {
      /**
       * Format: int64
       * @description The id of the contact linked to this address
       * @example 123456
       */
      contactId: number
      /**
       * @description The type of address
       * @example HOME
       */
      addressType: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string | null
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string | null
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string | null
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string | null
      /**
       * @description City code - from NOMIS reference data
       * @example BIRM
       */
      cityCode?: string | null
      /**
       * @description County code - from NOMIS reference data
       * @example WMIDS
       */
      countyCode?: string | null
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string | null
      /**
       * @description Country code - from NOMIS reference data
       * @example UK
       */
      countryCode?: string | null
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description The id of the user who updated the address
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the address was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description An address related to a contact with descriptions of all reference data */
    ContactAddressDetails: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      contactId: number
      /**
       * @description The type of address
       * @example HOME
       */
      addressType?: string
      /**
       * @description The description of the address type
       * @example HOME
       */
      addressTypeDescription?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string | null
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string | null
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string | null
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string | null
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string | null
      /**
       * @description The description of city code
       * @example Sheffield
       */
      cityDescription?: string | null
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string | null
      /**
       * @description The description of county code
       * @example South Yorkshire
       */
      countyDescription?: string | null
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string | null
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string | null
      /**
       * @description The description of country code
       * @example England
       */
      countryDescription?: string | null
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Which username ran the postcode lookup check
       * @example NJKG44D
       */
      verifiedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the postcode lookup was done
       * @example 2024-01-01T00:00:00Z
       */
      verifiedTime?: string
      /**
       * @description Flag to indicate whether mail is allowed to be sent to this address
       * @example false
       */
      mailFlag: boolean
      /**
       * Format: date
       * @description The start date when this address is to be considered active from
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address is to be considered no longer active
       * @example 2024-01-01
       */
      endDate?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      /**
       * @description The id of the user who last amended the contact address
       * @example JD000001
       */
      amendedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact address was last amended
       * @example 2024-01-01T00:00:00Z
       */
      amendedTime?: string
    } | null
    /** @description The details of a contact as an individual */
    GetContactResponse: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description Whether the contact is over 18, based on their date of birth if it is known
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The date the contact deceased, if known
       * @example false
       */
      isDeceased: boolean
      /**
       * Format: date
       * @description The date the contact deceased, if known
       * @example 1980-01-01
       */
      deceasedDate?: string | null
      /** @description All addresses for the contact */
      addresses: components['schemas']['ContactAddressDetails'][] | null
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    AddContactRelationshipRequest: {
      relationship: components['schemas']['ContactRelationship']
      /**
       * @description The id of the user creating the contact
       * @example JD000001
       */
      createdBy: string
    }
    /** @description Describes the details of a reference code */
    ReferenceCode: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this reference code.
       * @example 12345
       */
      referenceCodeId: number
      /**
       * @description The group name for related reference codes.
       * @example PHONE_TYPE
       */
      groupCode: string
      /**
       * @description The code for this reference data
       * @example MOBILE
       */
      code: string
      /**
       * @description A fuller description of the reference code
       * @example Mobile
       */
      description?: string
    }
    /** @description Describes the details of a prisoner's contact */
    PrisonerContactSummary: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description The unique identifier for the contact
       * @example 654321
       */
      contactId: number
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The surname of the contact
       * @example Doe
       */
      surname: string
      /**
       * @description The forename of the contact
       * @example John
       */
      forename: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description YES if the contact is over 18 years old, NO if under, null if unknown
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The relationship code between the prisoner and the contact
       * @example FRI
       */
      relationshipCode: string
      /**
       * @description The description of the relationship
       * @example Friend
       */
      relationshipDescription: string
      /**
       * @description Flat number in the address, if any
       * @example Flat 1
       */
      flat?: string | null
      /**
       * @description Property name or number
       * @example 123
       */
      property: string
      /**
       * @description Street name
       * @example Baker Street
       */
      street: string
      /**
       * @description Area or locality, if any
       * @example Marylebone
       */
      area?: string | null
      /**
       * @description City code
       * @example 25343
       */
      cityCode: string
      /**
       * @description The description of city code
       * @example Sheffield
       */
      cityDescription: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode: string
      /**
       * @description The description of county code
       * @example South Yorkshire
       */
      countyDescription: string
      /**
       * @description Postal code
       * @example NW1 6XE
       */
      postCode: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode: string
      /**
       * @description The description of country code
       * @example England
       */
      countryDescription: string
      /**
       * @description Indicates whether the contact is an approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * @description Is this contact the prisoner's next of kin?
       * @example false
       */
      nextOfKin: boolean
      /**
       * @description Is this contact the prisoner's emergency contact?
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Is this contact aware of the prisoner's charges?
       * @example true
       */
      awareOfCharges: boolean
      /**
       * @description Any additional comments
       * @example Close family friend
       */
      comments?: string | null
    }
    /** @description Language reference entity */
    Language: {
      /**
       * Format: int64
       * @description Unique identifier of the language
       * @example 1
       */
      languageId: number | null
      /**
       * @description Nomis code of the language
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the language
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * @description ISO Alpha-2 code of the language
       * @example GB
       */
      isoAlpha2: string
      /**
       * @description ISO Alpha-3 code of the language
       * @example GBR
       */
      isoAlpha3: string
      /**
       * @description ISO language description
       * @example United Kingdom of Great Britain and Northern Ireland
       */
      isoLanguageDesc: string
      /**
       * Format: int32
       * @description Display sequence for the language
       * @example 1
       */
      displaySequence: number
    }
    /** @description County reference entity */
    County: {
      /**
       * Format: int64
       * @description Unique identifier of the county
       * @example 1
       */
      countyId: number | null
      /**
       * @description Nomis code of the county
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the county
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description Display sequence for the county
       * @example 1
       */
      displaySequence: number
    }
    /** @description Country reference entity */
    Country: {
      /**
       * Format: int64
       * @description Unique identifier of the country
       * @example 1
       */
      countryId: number | null
      /**
       * @description Nomis code of the country
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the country
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description ISO numeric code of the country
       * @example 826
       */
      isoNumeric: number
      /**
       * @description ISO Alpha-2 code of the country
       * @example GB
       */
      isoAlpha2: string
      /**
       * @description ISO Alpha-3 code of the country
       * @example GBR
       */
      isoAlpha3: string
      /**
       * @description ISO country description
       * @example United Kingdom of Great Britain and Northern Ireland
       */
      isoCountryDesc: string
      /**
       * Format: int32
       * @description Display sequence for the country
       * @example 1
       */
      displaySequence: number
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Contact Search Request */
    ContactSearchRequest: {
      /**
       * @description Last name of the contact
       * @example Jones
       */
      lastName: string
      /**
       * @description First name of the contact
       * @example Elton
       */
      firstName?: string | null
      /**
       * @description Middle name of the contact
       * @example Simon
       */
      middleName?: string | null
      /**
       * Format: date
       * @description Date of Birth of the contact in ISO format
       */
      dateOfBirth?: string | null
    }
    /** @description The details of a contact as an individual */
    ContactSearchResultItem: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime?: string
      /**
       * @description The flat of the contact address, if known
       * @example 01
       */
      flat?: string | null
      /**
       * @description The property of the contact address, if known
       * @example 01
       */
      property?: string | null
      /**
       * @description The street of the contact address, if known
       * @example Bluebell Crescent
       */
      street?: string | null
      /**
       * @description The area of the contact address, if known
       * @example Birmingham
       */
      area?: string | null
      /**
       * @description The city code of the contact address, if known
       * @example 25343
       */
      cityCode?: string | null
      /**
       * @description The description of city code, if known
       * @example Sheffield
       */
      cityDescription?: string | null
      /**
       * @description The county code of the contact address, if known
       * @example S.YORKSHIRE
       */
      countyCode?: string | null
      /**
       * @description The description of county code, if known
       * @example South Yorkshire
       */
      countyDescription?: string | null
      /**
       * @description The postcode of the contact address, if known
       * @example B42 2QJ
       */
      postCode?: string | null
      /**
       * @description The country code of the contact address, if known
       * @example ENG
       */
      countryCode?: string | null
      /**
       * @description The description of country code, if known
       * @example England
       */
      countryDescription?: string | null
      /**
       * @description Flag to indicate if mail can be sent to this address
       * @example false
       */
      mailFlag?: boolean | null
      /**
       * Format: date
       * @description The date from which this address can be considered active
       * @example 2022-10-01
       */
      startDate?: string | null
      /**
       * Format: date
       * @description The date after which this address should be considered inactive
       * @example 2023-10-02
       */
      endDate?: string | null
      /**
       * @description A flag to indicate that this address is effectively no fixed address
       * @example false
       */
      noFixedAddress?: boolean | null
    }
    ContactSearchResultItemPage: {
      content?: components['schemas']['ContactSearchResultItem'][]
      pageable?: components['schemas']['PageableObject']
      /** Format: int64 */
      total?: number
      last?: boolean
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
    /** @description City reference entity */
    City: {
      /**
       * Format: int64
       * @description Unique identifier of the city
       * @example 1
       */
      cityId: number | null
      /**
       * @description Nomis code of the city
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the city
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description Display sequence for the city
       * @example 1
       */
      displaySequence: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getPrisonerContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the prisoner contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
    }
  }
  updatePrisonerContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonerContactRequest']
      }
    }
    responses: {
      /** @description Successfully updated prisoner contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PrisonerContact not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
    }
  }
  deletePrisonerContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted prisoner contact */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
    }
  }
  updateContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Contact not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
    }
  }
  deleteContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestriction']
        }
      }
    }
  }
  createContactPhone: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactPhoneRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhone']
        }
      }
    }
  }
  createContactIdentity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactIdentityRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentity']
        }
      }
    }
  }
  createContactEmail: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactEmailRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmail']
        }
      }
    }
  }
  createContactAddress: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactAddressRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddress']
        }
      }
    }
  }
  createPrisonerContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonerContactRequest']
      }
    }
    responses: {
      /** @description Successfully created prisoner contact */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContact']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRequest']
      }
    }
    responses: {
      /** @description Successfully created contact */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestriction']
        }
      }
    }
  }
  updateContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestriction']
        }
      }
    }
  }
  deleteContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getContactPhoneById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhone']
        }
      }
    }
  }
  updateContactPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactPhoneRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhone']
        }
      }
    }
  }
  deleteContactPhoneById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getContactIdentityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentity']
        }
      }
    }
  }
  updateContactIdentity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactIdentityRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentity']
        }
      }
    }
  }
  deleteContactIdentityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getContactEmailById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmail']
        }
      }
    }
  }
  updateContactEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactEmailRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmail']
        }
      }
    }
  }
  deleteContactEmailById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getContactAddressById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddress']
        }
      }
    }
  }
  updateContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactAddressRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddress']
        }
      }
    }
  }
  deleteContactAddressById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createContact_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRequest']
      }
    }
    responses: {
      /** @description Created the contact successfully */
      201: {
        headers: {
          /**
           * @description The URL where you can load the contact
           * @example /contact/123456
           */
          Location?: unknown
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetContactResponse']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner that this contact has a relationship to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addContactRelationship: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddContactRelationshipRequest']
      }
    }
    responses: {
      /** @description Created the relationship successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner or contact that this relationship relates to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceDataByGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The group code of the reference codes to load
         * @example PHONE_TYPE
         */
        groupCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of reference data codes/values */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of all contacts for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllContacts: {
    parameters: {
      query?: {
        /** @description Whether to include only active (true) or inactive (false) contacts */
        active?: boolean
      }
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of all contacts for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllCountries: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLanguageById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByIsoAlpha3: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that ISO Alpha 3 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByIsoAlpha2: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that ISO Alpha 2 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getAllCountries_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCountyById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No county reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
    }
  }
  getCountyByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No county reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
    }
  }
  getAllCountries_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCountryById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByIsoAlpha3: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that ISO Alpha 3 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByIsoAlpha2: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that ISO Alpha 2 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetContactResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  searchContacts: {
    parameters: {
      query: {
        /** @description Pageable configurations */
        pageable: components['schemas']['Pageable']
        /** @description Contact search criteria */
        request: components['schemas']['ContactSearchRequest']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found contacts */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactSearchResultItemPage']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllCountries_3: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No city reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
    }
  }
  getCityByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No city reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
    }
  }
}
