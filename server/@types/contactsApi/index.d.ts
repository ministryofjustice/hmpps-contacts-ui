/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a new contact
     * @description Creates a new contact that is not yet associated with any prisoner.
     */
    post: operations['createContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-codes/group/{groupCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to return reference data for a provided group key */
    get: operations['getReferenceDataByGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to get a specific prisoner by prison number */
    get: operations['getPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to fetch all contacts for a specific prisoner by prisoner number and active status */
    get: operations['getAllContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets all language references
     */
    get: operations['getAllCountries']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their id
     */
    get: operations['getLanguageById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their nomis code
     */
    get: operations['getLanguageByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/iso-alpha3/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their by ISO Alpha 3 code
     */
    get: operations['getLanguageByIsoAlpha3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/language-reference/iso-alpha2/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get language reference
     * @description Gets a language reference by their ISO Alpha 2 code
     */
    get: operations['getLanguageByIsoAlpha2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets all county references
     */
    get: operations['getAllCountries_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets a county reference by their id
     */
    get: operations['getCountyById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/county-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get county reference
     * @description Gets a county reference by their nomis code
     */
    get: operations['getCountyByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets all country references
     */
    get: operations['getAllCountries_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their id
     */
    get: operations['getCountryById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their nomis code
     */
    get: operations['getCountryByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/iso-alpha3/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their by ISO Alpha 3 code
     */
    get: operations['getCountryByIsoAlpha3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/country-reference/iso-alpha2/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get country reference
     * @description Gets a country reference by their ISO Alpha 2 code
     */
    get: operations['getCountryByIsoAlpha2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact
     * @description Gets a contact by their id
     */
    get: operations['getContact']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets all city references
     */
    get: operations['getAllCountries_3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets a city reference by their id
     */
    get: operations['getCityById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/city-reference/nomis-code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get city reference
     * @description Gets a city reference by their nomis code
     */
    get: operations['getCityByNomisCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description A description of the relationship if the contact should be linked to a prisoner */
    ContactRelationshipRequest: {
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The relationship code between the prisoner and the contact
       * @example FRI
       */
      relationshipCode: string
      /**
       * @description Whether they are the next of kin for the prisoner
       * @example true
       */
      isNextOfKin: boolean
      /**
       * @description Whether they are the emergency contact for the prisoner
       * @example true
       */
      isEmergencyContact: boolean
      /**
       * @description Comments about the contacts relationship with the prisoner
       * @example Some additional information
       */
      comments?: string | null
    } | null
    /** @description Request to create a new contact */
    CreateContactRequest: {
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description If the date of birth is not known, this indicates whether they are believed to be over 18 or not
       * @example YES
       * @enum {string|null}
       */
      estimatedIsOverEighteen?: 'YES' | 'NO' | 'DO_NOT_KNOW' | null
      relationship?: components['schemas']['ContactRelationshipRequest']
      /**
       * @description The id of the user creating the contact
       * @example JD000001
       */
      createdBy: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The details of a contact as an individual */
    Contact: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description The title of the contact, if any
       * @example Mr
       */
      title?: string | null
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string | null
      /**
       * @description Whether the contact is over 18
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Describes the details of a reference code */
    ReferenceCode: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this reference code.
       * @example 12345
       */
      referenceCodeId: number
      /**
       * @description The group name for related reference codes.
       * @example PHONE_TYPE
       */
      groupCode: string
      /**
       * @description The code for this reference data
       * @example MOBILE
       */
      code: string
      /**
       * @description A fuller description of the reference code
       * @example Mobile
       */
      description?: string
    }
    /** @description Describes the details of a prisoner's contact */
    PrisonerContactSummary: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description The unique identifier for the contact
       * @example 654321
       */
      contactId: number
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The surname of the contact
       * @example Doe
       */
      surname: string
      /**
       * @description The forename of the contact
       * @example John
       */
      forename: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string | null
      /**
       * Format: date
       * @description The date of birth of the contact
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description YES if the contact is over 18 years old, NO if under, null if unknown
       * @example YES
       * @enum {string}
       */
      estimatedIsOverEighteen: 'YES' | 'NO' | 'DO_NOT_KNOW'
      /**
       * @description The relationship code between the prisoner and the contact
       * @example FRI
       */
      relationshipCode: string
      /**
       * @description The description of the relationship
       * @example Friend
       */
      relationshipDescription: string
      /**
       * @description Flat number in the address, if any
       * @example Flat 1
       */
      flat?: string | null
      /**
       * @description Property name or number
       * @example 123
       */
      property: string
      /**
       * @description Street name
       * @example Baker Street
       */
      street: string
      /**
       * @description Area or locality, if any
       * @example Marylebone
       */
      area?: string | null
      /**
       * @description City code
       * @example LON
       */
      cityCode: string
      /**
       * @description County code
       * @example GLA
       */
      countyCode: string
      /**
       * @description Postal code
       * @example NW1 6XE
       */
      postCode: string
      /**
       * @description Country code
       * @example GBR
       */
      countryCode: string
      /**
       * @description Indicates whether the contact is an approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * @description Is this contact the prisoner's next of kin?
       * @example false
       */
      nextOfKin: boolean
      /**
       * @description Is this contact the prisoner's emergency contact?
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Is this contact aware of the prisoner's charges?
       * @example true
       */
      awareOfCharges: boolean
      /**
       * @description Any additional comments
       * @example Close family friend
       */
      comments?: string | null
    }
    /** @description Language reference entity */
    Language: {
      /**
       * Format: int64
       * @description Unique identifier of the language
       * @example 1
       */
      languageId: number | null
      /**
       * @description Nomis code of the language
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the language
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * @description ISO Alpha-2 code of the language
       * @example GB
       */
      isoAlpha2: string
      /**
       * @description ISO Alpha-3 code of the language
       * @example GBR
       */
      isoAlpha3: string
      /**
       * @description ISO language description
       * @example United Kingdom of Great Britain and Northern Ireland
       */
      isoLanguageDesc: string
      /**
       * Format: int32
       * @description Display sequence for the language
       * @example 1
       */
      displaySequence: number
    }
    /** @description County reference entity */
    County: {
      /**
       * Format: int64
       * @description Unique identifier of the county
       * @example 1
       */
      countyId: number | null
      /**
       * @description Nomis code of the county
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the county
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description Display sequence for the county
       * @example 1
       */
      displaySequence: number
    }
    /** @description Country reference entity */
    Country: {
      /**
       * Format: int64
       * @description Unique identifier of the country
       * @example 1
       */
      countryId: number | null
      /**
       * @description Nomis code of the country
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the country
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description ISO numeric code of the country
       * @example 826
       */
      isoNumeric: number
      /**
       * @description ISO Alpha-2 code of the country
       * @example GB
       */
      isoAlpha2: string
      /**
       * @description ISO Alpha-3 code of the country
       * @example GBR
       */
      isoAlpha3: string
      /**
       * @description ISO country description
       * @example United Kingdom of Great Britain and Northern Ireland
       */
      isoCountryDesc: string
      /**
       * Format: int32
       * @description Display sequence for the country
       * @example 1
       */
      displaySequence: number
    }
    /** @description City reference entity */
    City: {
      /**
       * Format: int64
       * @description Unique identifier of the city
       * @example 1
       */
      cityId: number | null
      /**
       * @description Nomis code of the city
       * @example GBR
       */
      nomisCode: string
      /**
       * @description Nomis description of the city
       * @example United Kingdom
       */
      nomisDescription: string
      /**
       * Format: int32
       * @description Display sequence for the city
       * @example 1
       */
      displaySequence: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  createContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRequest']
      }
    }
    responses: {
      /** @description Created the contact successfully */
      201: {
        headers: {
          /**
           * @description The URL where you can load the contact
           * @example /contact/123456
           */
          Location?: unknown
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner that this contact has a relationship to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceDataByGroup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The group code of the reference codes to load
         * @example PHONE_TYPE
         */
        groupCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of reference data codes/values */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of all contacts for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllContacts: {
    parameters: {
      query?: {
        /** @description Whether to include only active (true) or inactive (false) contacts */
        active?: boolean
      }
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of all contacts for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllCountries: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLanguageById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByIsoAlpha3: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that ISO Alpha 3 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getLanguageByIsoAlpha2: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the language reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No language reference with that ISO Alpha 2 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Language']
        }
      }
    }
  }
  getAllCountries_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCountyById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No county reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
    }
  }
  getCountyByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the county reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No county reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['County']
        }
      }
    }
  }
  getAllCountries_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCountryById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByIsoAlpha3: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that ISO Alpha 3 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getCountryByIsoAlpha2: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the country reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No country reference with that ISO Alpha 2 code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Country']
        }
      }
    }
  }
  getContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  getAllCountries_3: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No city reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
    }
  }
  getCityByNomisCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the city reference */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No city reference with that nomis code could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['City']
        }
      }
    }
  }
}
